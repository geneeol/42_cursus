!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_OBJS	Libft/Makefile	/^	ALL_OBJS = $(OBJS) $(OBJS_BONUS)$/;"	m
ALL_OBJS	Libft/Makefile	/^	ALL_OBJS = $(OBJS)$/;"	m
CC	Libft/Makefile	/^CC = cc$/;"	m
CC	Makefile	/^CC = cc$/;"	m
CFLAGS	Libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
FT_PRINTF_H	ft_printf.h	/^# define FT_PRINTF_H$/;"	d
LIBFT_H	Libft/libft.h	/^# define LIBFT_H$/;"	d
LL_MAX	Libft/libft.h	/^# define LL_MAX /;"	d
NAME	Libft/Makefile	/^NAME = libft.a$/;"	m
NAME	Makefile	/^NAME = libftprintf.a$/;"	m
OBJS	Libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:c=o) $/;"	m
OBJS_BONUS	Libft/Makefile	/^OBJS_BONUS = $(SRCS_BONUS:.c=.o)$/;"	m
SRCS	Libft/Makefile	/^SRCS = ft_isalpha.c 	\\$/;"	m
SRCS	Makefile	/^SRCS = ft_printf.c \\$/;"	m
SRCS_BONUS	Libft/Makefile	/^SRCS_BONUS = ft_lstnew.c \\$/;"	m
assign_ret	Libft/ft_itoa.c	/^static void	assign_ret(char *str, int n, int is_neg)$/;"	f	file:
content	Libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
free_alloc	Libft/ft_lstmap.c	/^static t_list	*free_alloc(t_list **lst, void (*del)(void *))$/;"	f	file:
free_alloc	Libft/ft_split.c	/^static char	**free_alloc(char **ptr, int i)$/;"	f	file:
ft_atoi	Libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	Libft/ft_bzero.c	/^void	ft_bzero(void *ptr, size_t n)$/;"	f
ft_calloc	Libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_isalnum	Libft/ft_isalnum.c	/^int	ft_isalnum(int ch)$/;"	f
ft_isalpha	Libft/ft_isalpha.c	/^int	ft_isalpha(int ch)$/;"	f
ft_isascii	Libft/ft_isascii.c	/^int	ft_isascii(int ch)$/;"	f
ft_isdigit	Libft/ft_isdigit.c	/^int	ft_isdigit(int ch)$/;"	f
ft_isprint	Libft/ft_isprint.c	/^int	ft_isprint(int ch)$/;"	f
ft_itoa	Libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_len	Libft/ft_itoa.c	/^static int	ft_len(int n)$/;"	f	file:
ft_lstadd_back	Libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	Libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	Libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	Libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	Libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	Libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	Libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	Libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	Libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	Libft/ft_memchr.c	/^void	*ft_memchr(const void *str, int ch, size_t n)$/;"	f
ft_memcmp	Libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	Libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	Libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	Libft/ft_memset.c	/^void	*ft_memset(void *ptr, int value, size_t len)$/;"	f
ft_printf	ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_putchar_fd	Libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char ch, int fd)$/;"	f
ft_putendl_fd	Libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *str, int fd)$/;"	f
ft_putnbr_fd	Libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	Libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/;"	f
ft_split	Libft/ft_split.c	/^char	**ft_split(char const *str, char ch)$/;"	f
ft_strchr	Libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int ch)$/;"	f
ft_strdup	Libft/ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f
ft_striteri	Libft/ft_striteri.c	/^void	ft_striteri(char *str, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	Libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	Libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dst_size)$/;"	f
ft_strlcpy	Libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dst_size)$/;"	f
ft_strlen	Libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	Libft/ft_strmapi.c	/^char	*ft_strmapi(char const *str, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	Libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	Libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	Libft/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int ch)$/;"	f
ft_strtrim	Libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	Libft/ft_substr.c	/^char	*ft_substr(char const *str, unsigned int start, size_t len)$/;"	f
ft_tolower	Libft/ft_tolower.c	/^int	ft_tolower(int ch)$/;"	f
ft_toupper	Libft/ft_toupper.c	/^int	ft_toupper(int ch)$/;"	f
ft_word_cnt	Libft/ft_split.c	/^static int	ft_word_cnt(char const *str, char ch)$/;"	f	file:
is_space	Libft/ft_atoi.c	/^static int	is_space(char ch)$/;"	f	file:
next	Libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
pf_conversion	ft_printf.c	/^static int	pf_conversion(const char *format, va_list ap)$/;"	f	file:
pf_itoa	ft_printf_utils.c	/^void	pf_itoa(int n, char str[])$/;"	f
pf_itoa_hex	ft_printf_utils.c	/^void	pf_itoa_hex(unsigned long long n, char str[], char specifier)$/;"	f
pf_itoa_u	ft_printf_utils.c	/^void	pf_itoa_u(unsigned int n, char str[])$/;"	f
pf_len	ft_printf_utils.c	/^int	pf_len(int n)$/;"	f
print_addr	ft_printf.c	/^static int	print_addr(void *ptr)$/;"	f	file:
print_char	ft_printf_str.c	/^int	print_char(char ch)$/;"	f
print_decimal	ft_printf_numeric.c	/^int	print_decimal(int n)$/;"	f
print_hex	ft_printf_numeric.c	/^int	print_hex(unsigned int n, char button)$/;"	f
print_str	ft_printf_str.c	/^int	print_str(char *str)$/;"	f
print_udecimal	ft_printf_numeric.c	/^int	print_udecimal(unsigned int n)$/;"	f
rec	Libft/ft_putnbr_fd.c	/^static void	rec(int n, int fd)$/;"	f	file:
s_list	Libft/libft.h	/^typedef struct s_list$/;"	s
t_list	Libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
